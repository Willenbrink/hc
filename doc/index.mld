{0 Hc {%html: <span class="version">%%VERSION%%</span>%}}

Hc declares dynamic web pages by using HTML data attributes to
seamlessly update the page with HTML fragments requested from the
server.

Using hypertext as the interaction substrate keeps logic on the server
and, in the simplest cases, reduces front-end client code to custom
CSS animations and an invocation of the {!Hc_page.init} function.

[hc] was inspired by {{:https://htmx.org/}htmx}.

{1:quick_start Quick start}

If you really do not want to write a single line of front-end code,
include the page [$(opam var share)/hc/hc-page.js] in your page. Now
the following:

{v
<script type="text/javascript" defer src="hc-page.js"></script>
<button data-request="POST /clicked"
        data-effect="element">Replace me</button>
v}

instructs a click on the button to perform a POST request to
[/clicked] and replace the button with the HTML response. That's it.

If you installed [hc] with tests ([opam install -t hc]). The
[hc-examples] binary serves a few interaction examples.

{1:manuals Manuals}

{ul
{- The {{!page-manual}manual} explains it all.}}

{1:api API}

{!modules:
Hc
Hc_page
}

{1:todo TODO}

{ul
{- Provide and trigger events for [Hc] behaviour itself, this
   allows to chain [Hc] connections in interesting ways and
   helps coordinating with other front end code.
   {b Update.} Something was hastily added in {!Hc.Ev}.
   needs proper design and documentation.}
{- Because of resource costs we likely want something like
   multi-target response updates for SSE and websockets. Also
   useful for deletion examples (or should we enrich effect ?)}
{- Provide support for full page target. Support a [data-preserve]
   attribute which patches by id in the replacement}
{- Provide support history via [data-push-history], pushes the request
   url, snapshots body element for state restoration.}
{- Provide support for load and revealed events.}
{- The event source mecanism remains expressively limited e.g.
   for click event from that element, key from that other one,
   but maybe we don't care. It's possible to work around. Parsewise
   it's difficult to have a <sel> argument in an attribute
   beyond itself (e.g. [from:<sel>]).}
{- Define the semantics in case of HTTP errors}
{- Maybe for keep event simple, only trigger on
   request element but devise a separate DSL to declare custom
   events and fan-in from other events. Or even, let that
   to separate JavaScript fiddling.}
{- Consider [data-response-sel] to apply on the response.}
{- Provide request counters and discard if older reponse or not latest.}
{- Provide default filters that easily}
{- We likely want to expose the dom effecting stuff (for now
   exposed hastily for hyperbib and undocumented), make a nice
   api and let [hc] use it.}}
