{0 Hc {%html: <span class="version">%%VERSION%%</span>%}}

Hc declares dynamic web pages by using HTML data attributes to
seamlessly update the page with HTML fragments requested from the
server.

Using hypertext as the interaction substrate keeps logic on the server
and, in the simplest cases, reduces front-end client code to an
invocation of the {!Hc_page.init} function and custom CSS animations.

[hc] was inspired by {{:https://htmx.org/}htmx}.

{1:quick_start Quick start}

In your HTML,

{v
<script type="text/javascript" defer src="hc-page.js"></script>
<button data-request="POST /clicked" data-effect="inplace">
  Replace me
</button>
v}

Instructs a click on the button to perform a POST request to
[/clicked] and replace the button with the HTML response.

{1:manuals Manuals}

{ul
{- The {{!page-manual}manual} explains it all.}}

{1:api API}

{!modules:
Hc
Hc_page
}

{1:todo TODO}

{ul
{- Provide and trigger events for [Hc] behaviour itself, this
   allows to chain [Hc] connections in interesting ways and
   helps coordinating with other front end code}
{- Because of resource costs we likely want something like
   multi-target response updates for SSE and websockets. Also
   useful for deletion examples (or should we enrich effect ?)}
{- Provide support for full page target. Support a [data-preserve]
   attribute which patches by id in the replacement}
{- Provide support history via [data-push-history], pushes the request
   url, snapshots body element for state restoration.}
{- Provide support for load and revealed events.}
{- The event source mecanism remains expressively limited e.g.
   for click event from that element, key from that other one,
   but maybe we don't care. It's possible to work around. Parsewise
   it's difficult to have a <sel> argument in an attribute
   beyond itself (e.g. [from:<sel>]).}
{- Define the semantics in case of HTTP errors}
{- Maybe for events keep event simpler, only trigger on
   request element but devise a separate DSL to declare custom
   events and fan-in from other events. Or even, let that
   to separate JavaScript fiddling.}
{- Consider [data-response-sel] to apply on the response.}
{- Try to get rid of [delay] in [data-effect]. It would be nice is to
   avoid the CSS/code duration dupe.
   Fiddling with transitionend animationend event seems brittle.
    It's
   a bit annoying because animations may be on descendents of
   [hc-out] and [hc-out-parent]. One approach could be to apply
   the classes and then find the max of [animation-duration],
   [transition-duration] via getComputedStyle. The client then
   needs to specify [animation-duration] even if it's not the element
   animating.
   }}
